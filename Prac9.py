############ DEL KEYWORD (used to delete obj properties or obj itself) ################ class Student:#     def __init__(self, name, marks):#         self.name = name#         self.marks = marks# s1 = Student("ABC", 97)# print(s1.name)# del s1.marks# print(s1.marks)############## PRIVATE ATTRIBUTES AND METHODS ##################3# class Account:#     def __init__(self, ano, apass):#         self.ano = ano#         self.__apass = apass  # put 2 underscores for the attribute to make it private (cannot be accessed outside the class)        #     def reset_pass(self):#         print(self.__apass)        # acc1 = Account("123", "xyz")# print(acc1.ano)# print(acc1.reset_pass())# print(acc1.__apass)  # cannot be accessed outside the class# class Person:#     __name = "abc"    #     def __hello(self):#         print("hello person")        #     def welcome(self):#         self.__hello()# p1 = Person()# print(p1.welcome())   ############### INHERITANCE (when one class derives the properties and methods of another class) ################## SINGLE INHERITANCE# class Car:#     @staticmethod#     def start():#         print("car started.....")        #     @staticmethod#     def stop():#         print("car stopped.")        # class ToyotaCar(Car):  #     def __init__(self, name):#         self.name = name        # car1 = ToyotaCar("Fortuner")# print(car1.start())   # MULTI-LEVEL INHERITANCE# class Car:#     @staticmethod#     def start():#         print("car started.....")        #     @staticmethod#     def stop():#         print("car stopped.")        # class ToyotaCar(Car):  #     def __init__(self, brand):#         self.brand = brand        # class Fortuner(ToyotaCar):#     def __init__(self, type):#         self.type = type        # car1 = Fortuner("Petrol")# car1.start() # MULTIPLE INHERITANCE# class A:#     varA = "welcome to class A"    # class B:#     varB = "welcome to class B"  # class C(A, B):#     varC = "welcome to class C"# c1 = C()# print(c1.varC)# print(c1.varB)# print(c1.varA)     ########### SUPER METHOD ############## class Car:#     def __init__(self, type):#         self.type = type        #     @staticmethod#     def start():#         print("car started.....")        #     @staticmethod#     def stop():#         print("car stopped.")        # class ToyotaCar(Car):  #     def __init__(self, name, type):#         self.name = name#         super().__init__(type)        # c1 = ToyotaCar("prius", "electric")# print(c1.type)        ############### CLASS METHOD ################### class Person:#     name = "anonymous"    #     # def changename(self, name):#     #     # Person.name = name (another way to change the name)#     #     self.__class__.name = "Rahul"        #     @classmethod#     def changeName(self, name):#         self.name = name        # p1 = Person()# p1.changename("Rahul")# print(p1.name)# print(Person.name)   ############ PROPERTY METHOD ################# class Student:#     def __init__(self, phy, chem, math):#         self.phy = phy#         self.chem = chem#         self.math = math        #     @property#     def percentage(self):#         return str((self.phy + self.chem + self.math) / 3) + "%"# s1 = Student(98, 94, 96)# print(s1.percentage)# s1.phy = 86# print(s1.percentage)             ############## POLYMORPHISM (when same operator is allowed to have different meanings according to context) ################# print(1 + 5)  #adds# print("python" + "programming")  #concates# print([1, 2, 3] + [4, 5, 6])   #merges ############ COMPLEX NUMBERS ################### class Complex:#     def __init__(self, real, img):#         self.real = real#         self.img = img        #     def showNum(self):#         print(self.real,"i +",self.img,"j")        # c1 = Complex(1, 3)# c1.showNum()            ########### Define a Circle class to create a circle with radius r using a constructor. Define an Area() method which calculates area of circle. Define a Perimeter() method which calculates perimeter of circle. ######################    # class Circle:#     def __init__(self, radius):#         self.radius = radius        #     def Area(self):#         return 3.14 * self.radius ** 2    #     def Perimeter(self):#         return 2 * 3.14 * self.radius    # cir1 = Circle(21)# print(cir1.Area())# print(cir1.Perimeter())        ########### Define an Employee class with attr - role, department, salary. This class also has a showDetails() method. Create an Engineer class that inherits properties from Employee and has additional attr - name and age. ############### class Employee:#     def __init__(self, role, dept, sal):#         self.role = role#         self.dept = dept#         self.sal = sal        #     def showDet(self):#         print("Role:", self.role)#         print("Department:", self.dept)#         print("Salary:", self.sal)        # class Engineer(Employee):#     def __init__(self, name, age):#         self.name = name#         self.age = age#         super().__init__("Engineer", "IT", "65000")        # e1 = Engineer("Kavya", 35)# e1.showDet()        ########## Create an Order class which stores item and its price. Use dunder func __gt__() to convey that: order1>order2 if price of order1 > price of order2. ####################class Order:    def __init__(self, item, price):        self.item = item        self.price = price            def __gt__(self, odr2):        return self.price > odr2.price    odr1 = Order("chips", 10)odr2 = Order("chocolate", 5)print(odr1 > odr2)                                                                                                                                                                                                        